{"version":3,"sources":["components/Table/Column/Column.tsx","components/SharedComponents/ControllerBtn/ControllerBtn.tsx","redux/slices/notesPageSlice.ts","redux/store.ts","redux/hooks/notesPageHooks.ts","components/Table/Table.tsx","components/TableItems/Field/Field.tsx","components/TableItems/NoteItemForm/NoteItemForm.tsx","components/TableItems/NoteItem.tsx","components/TableItems/StatItem.tsx","components/Slider/Slide.tsx","components/SharedComponents/Button/Button.tsx","pages/NotesPage/NotesPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Column","props","className","columnName","ControllerBtn","iconClasses","type","color","isAll","onClick","colorStyle","title","style","notesPageSlice","createSlice","name","initialState","notes","id","isActive","created","category","content","dates","editingNotes","categories","currentSlide","reducers","deleteNote","state","action","index","findIndex","note","payload","splice","deleteAllNotes","filter","addNote","unshift","editNote","forEach","i","archiveAllNotes","unzipAllNotes","toggleEditing","pop","push","toggleCurrentSlide","actions","store","configureStore","reducer","notesPage","notesPageReducer","useAppSelector","useSelector","useNotesPageSelector","shallowEqual","useNotesPageDispatch","dispatch","useDispatch","editedFields","set","Table","columns","renderControllers","height","children","cols","map","colName","nanoid","controllersOnClick","e","currentTarget","getAttribute","controllers","Field","innerText","isEditable","value","placeholder","error","fieldRef","onChange","defaultValue","ref","getDateFromItemContent","match","length","join","NoteItemForm","fields","formikRef","firstFieldRef","useRef","useEffect","current","focus","innerRef","initialValues","nameInput","categorySelect","contentInput","validationSchema","Yup","min","max","required","onSubmit","values","formik","handleSubmit","errors","handleChange","cat","chooseCategoryIcon","NoteItem","item","typeOfEditController","typeOfArchiveController","Object","keys","key","StatItem","active","archived","Slide","isCurrent","Button","inner","bgColor","disabled","noteItemsTableCols","statItemsTableCols","months","NotesPage","activeNotes","archivedNotes","date","Date","getDate","getMonth","getFullYear","window","scrollTo","stats","countNotesByCategories","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76333397.chunk.js","sourcesContent":["const Column = (props: { columnName: string }) => {\n    return (\n        <div className={'table__col'}>\n            <h3>{props.columnName}</h3>\n        </div>\n    )\n}\n\nexport default Column;","import './ControllerBtn.scss';\nimport {FC, MouseEventHandler} from \"react\";\n\nexport type ControllerBtnTypes = 'Archive' | 'Unzip' | 'Edit' | 'Submit' | 'Delete';\ntype ControllerBtnProps = {\n    type: ControllerBtnTypes\n    color: 'light' | 'blue'\n    isAll: boolean\n    onClick?: MouseEventHandler<HTMLDivElement>\n}\nconst ControllerBtn: FC<ControllerBtnProps> = ({ type, color, isAll, onClick}) => {\n    const colorStyle = color === 'light' ? 'white' : '#569adf';\n    let iconClasses;\n    switch (type) {\n        case 'Archive':\n            iconClasses = 'fas fa-box';\n            break;\n        case 'Unzip':\n            iconClasses = 'fas fa-box-open';\n            break;\n        case 'Edit':\n            iconClasses = 'fas fa-pencil-alt';\n            break;\n        case 'Submit':\n            iconClasses = 'fas fa-check-circle';\n            break;\n        case 'Delete':\n            iconClasses = 'fas fa-trash-alt';\n            break\n        default:\n            iconClasses = 'far fa-question-circle'\n    }\n    return(\n        <div className={'controller-btn'}\n             onClick={onClick}\n             title={isAll ? type + ' All' : type}\n             style={{ color: colorStyle }}>\n            <i className={iconClasses}/>\n        </div>\n    )\n}\n\nexport default ControllerBtn;","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type Category = 'Task' | 'Random Thought' | 'Idea';\nexport type NoteFields = {\n    name: string\n    created: string,\n    category: Category\n    content: string\n    dates: string\n}\nexport type NoteItemType = NoteFields & {\n    id: number\n    isActive: boolean\n};\nexport type EditNotePayloadType = {\n    id: number\n    isActive?: boolean\n    name?: string\n    created?: string,\n    category?: Category\n    content?: string\n    dates?: string\n}\nexport type DeleteAllNotesPayloadType = 'All' | 'Active' | 'Archived';\nexport type CurrentSlideType = 'Active' | 'Archived';\ntype initialStateType = {\n    notes: NoteItemType[]\n    editingNotes: number[]\n    categories: Category[]\n    currentSlide: CurrentSlideType\n}\nconst initialState: initialStateType = {\n    notes: [\n        {\n            id: 1,\n            isActive: true,\n            name: 'Radency internship',\n            created: '4 October 2021',\n            category: 'Task',\n            content: '18/10/2021',\n            dates: '18/10/2021'\n        },\n        {\n            id: 2,\n            isActive: true,\n            name: 'Dentist',\n            created: '20 April 2021',\n            category: 'Random Thought',\n            content: 'I’m gonna have a dentist appointment on the 3/5/2021, I moved it from 5/5/2021',\n            dates: '3/5/2021, 5/5/2021'\n        },\n        {\n            id: 3,\n            isActive: false,\n            name: 'Riding a bike',\n            created: '20 April 2021',\n            category: 'Task',\n            content: 'Somehow somewhere one time',\n            dates: ''\n        },\n        {\n            id: 4,\n            isActive: true,\n            name: 'Dating with Natalya',\n            created: '5 October 2021',\n            category: 'Task',\n            content: '15/10/2021',\n            dates: '15/10/2021'\n        },\n        {\n            id: 5,\n            isActive: true,\n            name: 'Shopping List',\n            created: '20 April 2021',\n            category: 'Task',\n            content: 'Potatoes - 1kg, Milk - 1.5l, Snickers - 2',\n            dates: ''\n        },\n        {\n            id: 6,\n            isActive: true,\n            name: 'What if',\n            created: '20 April 2021',\n            category: 'Random Thought',\n            content: '...',\n            dates: ''\n        },\n        {\n            id: 7,\n            isActive: true,\n            name: 'Good idea',\n            created: '20 April 2021',\n            category: 'Idea',\n            content: 'Really good idea',\n            dates: ''\n        }\n    ],\n    editingNotes: [],\n    categories: ['Task', 'Idea', 'Random Thought'],\n    currentSlide: 'Active'\n}\n\nconst notesPageSlice = createSlice({\n    name: 'notesPage',\n    initialState,\n    reducers: {\n        deleteNote: (state, action: PayloadAction<number>) => {\n            const index = state.notes.findIndex(note => note.id === action.payload);\n            if (index >= 0) state.notes.splice(index, 1);\n        },\n        deleteAllNotes: (state, action: PayloadAction<DeleteAllNotesPayloadType>) => {\n            switch (action.payload) {\n                case 'All':\n                    state.notes = [];\n                    break;\n                case 'Active':\n                    state.notes = state.notes.filter(note => !note.isActive);\n                    break;\n                case 'Archived':\n                    state.notes = state.notes.filter(note => note.isActive);\n                    break;\n            }\n        },\n        addNote: (state, action: PayloadAction<NoteItemType>) => {\n            state.notes.unshift(action.payload)\n        },\n        editNote: (state, action: PayloadAction<EditNotePayloadType>) => {\n            state.notes.forEach((note, i) => {\n                if (note.id === action.payload.id) state.notes[i] = { ...note, ...action.payload }\n            })\n        },\n        archiveAllNotes: (state) => {\n            state.notes.forEach(note => note.isActive = false)\n        },\n        unzipAllNotes: (state) => {\n            state.notes.forEach(note => note.isActive = true)\n        },\n        toggleEditing: (state, action: PayloadAction<number | null>) => {\n            if (action.payload === null) state.editingNotes.pop();\n            if (action.payload !== null) {\n                state.editingNotes.pop();\n                state.editingNotes.push(action.payload);\n            }\n        },\n        toggleCurrentSlide: (state) => {\n            if (state.currentSlide === 'Active') state.currentSlide = 'Archived';\n            else state.currentSlide = 'Active'\n        }\n    }\n})\n\nexport const {\n    deleteNote,\n    addNote,\n    editNote,\n    toggleEditing,\n    deleteAllNotes,\n    archiveAllNotes,\n    unzipAllNotes,\n    toggleCurrentSlide} = notesPageSlice.actions;\n\nexport default notesPageSlice.reducer;","import {configureStore} from \"@reduxjs/toolkit\";\nimport notesPageReducer from \"./slices/notesPageSlice\";\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\n\nconst store = configureStore({\n    reducer: {\n        notesPage: notesPageReducer,\n    }\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport default store;","import {shallowEqual} from \"react-redux\";\nimport {useAppDispatch, useAppSelector} from \"../store\";\nimport {\n    addNote, archiveAllNotes,\n    deleteAllNotes, DeleteAllNotesPayloadType,\n    deleteNote,\n    editNote,\n    EditNotePayloadType,\n    NoteItemType, toggleCurrentSlide,\n    toggleEditing, unzipAllNotes\n} from \"../slices/notesPageSlice\";\n\nexport const useNotesPageSelector = () => {\n    return {\n        notes: useAppSelector(state => state.notesPage.notes, shallowEqual),\n        editingNotes: useAppSelector(state => state.notesPage.editingNotes, shallowEqual),\n        categories: useAppSelector(state => state.notesPage.categories),\n        currentSlide: useAppSelector(state => state.notesPage.currentSlide)\n    }\n}\nexport const useNotesPageDispatch = () => {\n    const dispatch = useAppDispatch();\n    return {\n        deleteNote: (id: number) => dispatch(deleteNote(id)),\n        addNote: (note: NoteItemType) => dispatch(addNote(note)),\n        editNote: (editedFields: EditNotePayloadType) => dispatch(editNote(editedFields)),\n        toggleEditing: (id: number | null) => dispatch(toggleEditing(id)),\n        deleteAllNotes: (set: DeleteAllNotesPayloadType) => dispatch(deleteAllNotes(set)),\n        archiveAllNotes: () => dispatch(archiveAllNotes()),\n        unzipAllNotes: () => dispatch(unzipAllNotes()),\n        toggleCurrentSlide: () => dispatch(toggleCurrentSlide())\n    }\n}","import './Table.scss';\nimport {FC, SyntheticEvent} from \"react\";\nimport Column from \"./Column/Column\";\nimport ControllerBtn, {ControllerBtnTypes} from \"../SharedComponents/ControllerBtn/ControllerBtn\";\nimport {nanoid} from \"nanoid\";\nimport {useNotesPageDispatch, useNotesPageSelector} from \"../../redux/hooks/notesPageHooks\";\n\ntype TableItemPropsType = {\n    columns: string[]\n    renderControllers: boolean\n    height?: string\n}\nconst Table: FC<TableItemPropsType> = ({ columns, renderControllers = false, height='100%', children }) => {\n    const cols = columns.map(colName => <Column columnName={colName} key={nanoid()}/>);\n    const { currentSlide } = useNotesPageSelector();\n    const { deleteAllNotes, archiveAllNotes, unzipAllNotes } = useNotesPageDispatch();\n    const controllersTypes: ControllerBtnTypes[] = [currentSlide === 'Active' ? 'Archive' : 'Unzip', 'Delete'];\n    const controllersOnClick = (e: SyntheticEvent) => {\n        switch (e.currentTarget?.getAttribute('title')) {\n            case 'Delete All':\n                deleteAllNotes(currentSlide === 'Active' ? 'Active' : 'Archived');\n                break;\n            case 'Archive All':\n                archiveAllNotes();\n                break;\n            case 'Unzip All':\n                unzipAllNotes();\n                break;\n            default:\n                break;\n        }\n    }\n    const controllers = renderControllers\n        ? controllersTypes.map((type) => (\n            <ControllerBtn type={type}\n                           color={'light'}\n                           isAll={true}\n                           key={nanoid()}\n                           onClick={controllersOnClick}/>))\n        : null;\n    return(\n        <div className={ 'table' } >\n            <div className={ 'table__header' }>\n                { cols }\n                <div className={ 'table__controllers' }>\n                    { controllers }\n                </div>\n            </div>\n            <div className={ 'table__items' } style={{ height: height}}>\n                { children }\n            </div>\n        </div>\n    )\n}\n\nexport default Table;","import './Field.scss';\nimport {FC, Ref} from \"react\";\n\ntype InputSettings = {\n    name?: string\n    value?: string\n    placeholder?: string\n    error?: string\n    onChange?: any\n}\ntype FieldPropsType = InputSettings & {\n    innerText?: string\n    isEditable: boolean\n    fieldRef?: Ref<any> | null\n}\n\nconst Field: FC<FieldPropsType> = ({ innerText, isEditable, name, value, placeholder, error, fieldRef = null, onChange}) => {\n    return(\n        <div className={ 'table-item__field' }>\n            {\n                isEditable\n                ? <>\n                        <input type={ 'text' }\n                               name={name}\n                               defaultValue={value ? value : ''}\n                               placeholder={placeholder ? placeholder : ''}\n                               className={error ? 'table-item__input-error' : ''}\n                               ref={fieldRef}\n                               onChange={onChange} />\n                        <span className=\"table-item__field-error\">\n                            { error ? error : '' }\n                        </span>\n                    </>\n                : <p ref={fieldRef} title={innerText}>{ innerText }</p>\n            }\n        </div>\n    )\n}\n\nexport default Field;","import {NoteFields} from \"../../../redux/slices/notesPageSlice\";\nimport {FC, useEffect, useRef} from \"react\";\nimport {useNotesPageDispatch, useNotesPageSelector} from \"../../../redux/hooks/notesPageHooks\";\nimport {Formik} from \"formik\";\nimport * as Yup from \"yup\";\nimport Field from \"../Field/Field\";\nimport {nanoid} from \"nanoid\";\n\ntype NoteItemFormPropsType = {\n    fields: NoteFields\n    id: number\n    formikRef: any\n}\n\nconst NoteItemForm: FC<NoteItemFormPropsType> = ({ fields, id, formikRef }) => {\n    const { editNote } = useNotesPageDispatch();\n    const { categories } = useNotesPageSelector();\n    const firstFieldRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        if (firstFieldRef && firstFieldRef.current) firstFieldRef.current.focus()\n    })\n    return(\n        <Formik\n            innerRef={formikRef}\n            initialValues={{\n                nameInput: fields.name,\n                categorySelect: fields.category,\n                contentInput: fields.content\n            }}\n            validationSchema={\n                Yup.object({\n                    nameInput: Yup.string().min(1, 'Required').max(50, 'Max 50 characters').required('Required'),\n                    contentInput: Yup.string().max(150, 'Max 150 characters')\n                })\n            }\n            onSubmit={(values) => {\n                editNote({\n                    id,\n                    name: values.nameInput,\n                    category: values.categorySelect,\n                    content: values.contentInput,\n                    dates: getDateFromItemContent(values.contentInput)\n                })\n            }}\n        >\n            {\n                formik => (\n                    <form onSubmit={formik.handleSubmit}>\n                        <Field isEditable={true}\n                               name={'nameInput'}\n                               value={formik.values.nameInput}\n                               error={formik.errors.nameInput}\n                               onChange={formik.handleChange}\n                               fieldRef={firstFieldRef}\n                               key={`${id}__name`}\n                        />\n                        <Field innerText={fields.created}\n                               isEditable={false}\n                               key={nanoid()}\n                        />\n                        <div className=\"table-item__field\">\n                            <select name={'categorySelect'}\n                                    onChange={formik.handleChange}\n                                    value={formik.values.categorySelect}>\n                                {\n                                    categories.map(cat => <option value={cat}\n                                                                  key={nanoid()}>{ cat }</option>)\n                                }\n                            </select>\n                        </div>\n                        <Field isEditable={true}\n                               name={'contentInput'}\n                               value={formik.values.contentInput}\n                               error={formik.errors.contentInput}\n                               onChange={formik.handleChange}\n                               key={`${id}__content`}\n                        />\n                        <Field innerText={fields.dates}\n                               isEditable={false}\n                               key={nanoid()}\n                        />\n                    </form>\n                )\n            }\n\n        </Formik>\n    )\n}\nconst getDateFromItemContent = (content: string): string => {\n    //Matching d/m/yy and dd/mm/yyyy date formats\n    const regExp = /(3[01]|[12][0-9]|0?[1-9])\\/(1[0-2]|0?[1-9])\\/\\d{4}/g;\n    const dates = content.match(regExp);\n    if (dates && dates.length) {\n        return dates.join(', ');\n    } else {\n        return '';\n    }\n}\n\nexport default NoteItemForm;","import './TableItem.scss';\nimport {FC, useRef} from \"react\";\nimport {NoteItemType} from \"../../redux/slices/notesPageSlice\";\nimport {FormikValues} from 'formik';\nimport Field from \"./Field/Field\";\nimport {useNotesPageDispatch} from \"../../redux/hooks/notesPageHooks\";\nimport ControllerBtn from \"../SharedComponents/ControllerBtn/ControllerBtn\";\nimport NoteItemForm from \"./NoteItemForm/NoteItemForm\";\nimport {nanoid} from \"nanoid\";\n\n\nexport const chooseCategoryIcon = (category: string) => {\n    switch (category) {\n        case 'Task':\n            return <i className={ 'fas fa-tasks' } />\n        case 'Idea':\n            return <i className={ 'fas fa-lightbulb' } />\n        case 'Random Thought':\n            return <i className={ 'fas fa-code-branch' } />\n    }\n}\n\ntype TableItemType = {\n    item: NoteItemType\n    isEditable: boolean\n}\nconst NoteItem: FC<TableItemType> = ({ item, isEditable }) => {\n    const { toggleEditing, editNote, deleteNote } = useNotesPageDispatch();\n    const formikRef = useRef<FormikValues>(null);\n    const typeOfEditController = isEditable ? 'Submit' : 'Edit';\n    const typeOfArchiveController = item.isActive ? 'Archive' : 'Unzip';\n    const handleSubmit = () => {\n        if (formikRef.current) {\n            formikRef.current.handleSubmit()\n        }\n    }\n    const fields = {\n        name: item.name,\n        created: item.created,\n        category: item.category,\n        content: item.content,\n        dates: item.dates\n    } as any\n    return(\n        <div id={`${item.id}__note-item`} className={'table-item'}>\n                <div className=\"table-item__category-icon-box\">\n                    { chooseCategoryIcon(item.category)  }\n                </div>\n            {\n                isEditable\n                ? <NoteItemForm fields={fields} id={item.id} formikRef={formikRef} />\n                : Object.keys(fields).map((key: string) => <Field innerText={fields[key]}\n                                                                  isEditable={false}\n                                                                  key={nanoid()} />)\n            }\n            <div className=\"table-item__controllers-box\">\n                <ControllerBtn type={typeOfEditController}\n                               color={'blue'}\n                               isAll={false}\n                               key={nanoid()}\n                               onClick={() => {\n                                   if (isEditable) {\n                                       handleSubmit();\n                                       toggleEditing(null);\n                                   }\n                                   if (!isEditable) toggleEditing(item.id);\n                               }}/>\n                <ControllerBtn type={typeOfArchiveController}\n                               color={'blue'}\n                               isAll={false}\n                               key={nanoid()}\n                               onClick={() => {\n                                   editNote({ id: item.id, isActive: !item.isActive })\n                               }}/>\n                <ControllerBtn type={'Delete'}\n                               color={'blue'}\n                               isAll={false}\n                               key={nanoid()}\n                               onClick={() => {\n                                   deleteNote(item.id);\n                               }}/>\n            </div>\n        </div>\n    )\n}\n\nexport default NoteItem;","import './TableItem.scss';\nimport {chooseCategoryIcon} from \"./NoteItem\";\nimport {Category} from \"../../redux/slices/notesPageSlice\";\nimport {FC} from \"react\";\nimport Field from \"./Field/Field\";\n\ntype StatItemPropsType = {\n    category: Category\n    active: number\n    archived: number\n}\n\nconst StatItem: FC<StatItemPropsType> = ({ category, active, archived}) => {\n    return(\n        <div className={'table-item'}>\n            <div className=\"table-item__category-icon-box\">\n                {chooseCategoryIcon(category)}\n            </div>\n            <Field innerText={`${category}`} isEditable={false} key={`${category}__${category}`}/>\n            <Field innerText={`${active}`} isEditable={false} key={`${active}__active__${category}`}/>\n            <Field innerText={`${archived}`} isEditable={false} key={`${archived}__archived__${category}`}/>\n        </div>\n    )\n}\n\nexport default StatItem;","import './Slide.scss';\nimport {FC} from \"react\";\n// import {useNotesPageSelector} from \"../../redux/hooks/notesPageHooks\";\n\ntype SlidePropsType = {\n    title: string\n    isCurrent: boolean\n}\nconst Slide: FC<SlidePropsType> = ({ title, isCurrent, children}) => {\n    const current = isCurrent ? 'slide--current' : '';\n    // const { noteItemSlideScrollTop } = useNotesPageSelector();\n    // const slideRef = useRef<HTMLDivElement>(null);\n    // useEffect(() => {\n    //     const elem = slideRef.current;\n    //     if (elem) elem.scrollTop = noteItemSlideScrollTop;\n    // }, [])\n    return(\n        <div className={ `slide ${current}` }>\n            <h2 className={'slide__title'}>{ title }</h2>\n            { children }\n        </div>\n    )\n}\n\nexport default Slide;","import './Button.scss';\nimport {FC, MouseEventHandler, ReactElement} from \"react\";\n\ntype ButtonPropsType = {\n    type: 'submit' | 'button'\n    inner: string | ReactElement\n    bgColor: 'green' | 'blue'\n    color: string\n    disabled?: boolean\n    onClick: MouseEventHandler<HTMLButtonElement>\n}\n\nconst Button: FC<ButtonPropsType> = ({ type, inner, bgColor , color, disabled, onClick}) => {\n    return(\n        <button className={ `common-btn ${ bgColor === 'green' ? 'common-btn--green' : 'common-btn--blue' } common-btn${disabled ? '--disabled' : ''}`}\n                type={ type }\n                style={{ color }}\n                onClick={onClick}\n        >\n            { inner }\n        </button>\n    )\n}\n\nexport default Button;","import './NotesPage.scss';\nimport Table from \"../../components/Table/Table\";\nimport {nanoid} from \"nanoid\";\nimport NoteItem from \"../../components/TableItems/NoteItem\";\nimport {useNotesPageDispatch, useNotesPageSelector} from \"../../redux/hooks/notesPageHooks\";\nimport StatItem from \"../../components/TableItems/StatItem\";\nimport {Category, NoteItemType} from \"../../redux/slices/notesPageSlice\";\nimport Slide from \"../../components/Slider/Slide\";\nimport Button from \"../../components/SharedComponents/Button/Button\";\n\n\nexport const noteItemsTableCols = ['Name', 'Created', 'Category', 'Content', 'Dates'];\nexport const statItemsTableCols = ['Note Category', 'Active', 'Archived'];\nexport const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n]\nconst countNotesByCategories = (category: Category, notes: NoteItemType[]) => {\n    let active = 0;\n    let archived = 0;\n    notes.forEach(note => {\n        if (note.category === category) {\n            if (note.isActive) active++;\n            if (!note.isActive) archived++;\n        }\n    })\n\n    return {\n        category,\n        active,\n        archived\n    }\n}\n\nconst NotesPage = () => {\n    const { notes, editingNotes, categories, currentSlide } = useNotesPageSelector();\n    const { addNote, toggleCurrentSlide, toggleEditing } = useNotesPageDispatch();\n    let isEditable: boolean = false;\n    const activeNotes: JSX.Element[] = [];\n    const archivedNotes: JSX.Element[] = [];\n    const date = new Date();\n    notes.forEach(note => {\n        isEditable = !!(editingNotes && editingNotes[0] === note.id);\n        if (note.isActive) {\n            activeNotes.push(<NoteItem key={`${note.id}__note-item`}\n                             item={note}\n                             isEditable={isEditable}/>)\n        } else {\n            archivedNotes.push(<NoteItem key={`${note.id}__note-item`}\n                                    item={note}\n                                    isEditable={isEditable}/>)\n        }\n    })\n\n    return(\n        <div className={'notes-page'}>\n            <Table columns={noteItemsTableCols} renderControllers={true} height={'100%'} key={nanoid()}>\n                <div className={'notes-page__slider-box'}>\n                    <Slide title={'Active Notes'} isCurrent={currentSlide === 'Active'} >\n                        { activeNotes }\n                    </Slide>\n                    <Slide title={'Archived Notes'} isCurrent={currentSlide === 'Archived'}>\n                        { archivedNotes }\n                    </Slide>\n                </div>\n            </Table>\n            <div className=\"notes-page__controllers\">\n                <Button type={'button'}\n                        inner={'Create Note'}\n                        bgColor={'green'}\n                        color={'white'}\n                        disabled={currentSlide === 'Archived'}\n                        onClick={() => {\n                            addNote(\n                                {\n                                    id: notes.length + 1,\n                                    isActive: true,\n                                    name: '',\n                                    created: `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`,\n                                    category: 'Task',\n                                    content: '',\n                                    dates: ''\n                                });\n                            toggleEditing(notes.length + 1);\n                            window.scrollTo(0, 0);\n                        }}/>\n                <Button type={'button'}\n                        inner={currentSlide === 'Archived' ? 'To Active' : 'To Archive'}\n                        bgColor={'blue'}\n                        color={'white'}\n                        onClick={() => toggleCurrentSlide()}/>\n            </div>\n            <Table columns={statItemsTableCols} renderControllers={false} key={nanoid()}>\n                {\n                    categories.map((cat, index) => {\n                        const stats = countNotesByCategories(cat, notes);\n                        return <StatItem category={cat}\n                                         active={stats.active}\n                                         archived={stats.archived}\n                                         key={`${index}__item__${cat}`}/>\n                    })\n                }\n            </Table>\n        </div>\n    )\n}\n\nexport default NotesPage;","import React from 'react';\nimport './App.scss';\nimport NotesPage from \"./pages/NotesPage/NotesPage\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nconst App = () => {\n  return (\n      <BrowserRouter>\n          <div className=\"app-wrapper\">\n              <NotesPage/>\n          </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}